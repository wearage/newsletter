import logging
import os
from dotenv import load_dotenv
import psycopg2
from psycopg2 import sql
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CommandHandler, CallbackQueryHandler, CallbackContext, ApplicationBuilder

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
DB_CONFIG = {
    'dbname': os.getenv('DB_NAME', 'database1'),
    'user': os.getenv('DB_USER', 'root'),
    'password': os.getenv('DB_PASSWORD', '3421'),
    'host': os.getenv('DB_HOST', 'localhost'),
    'port': os.getenv('DB_PORT', '5432')
}

def get_database_connection():
    """–°–æ–∑–¥–∞–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö."""
    try:
        conn = psycopg2.connect(**DB_CONFIG)
        return conn
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return None

def get_statistics():
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –≤–∏–¥–µ —Å–ª–æ–≤–∞—Ä—è."""
    conn = get_database_connection()
    if not conn:
        return None

    try:
        with conn.cursor() as cursor:
            stats = {}

            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π
            cursor.execute("""
                SELECT COUNT(*) FROM user_stats WHERE initial_message_sent = TRUE;
            """)
            stats['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π'] = cursor.fetchone()[0]

            # –ù–∞—á–∞—Ç–æ –¥–∏–∞–ª–æ–≥–æ–≤
            cursor.execute("""
                SELECT COUNT(*) FROM user_stats WHERE user_replied = TRUE;
            """)
            stats['–ù–∞—á–∞—Ç–æ –¥–∏–∞–ª–æ–≥–æ–≤'] = cursor.fetchone()[0]

            # –ü–æ–ª—É—á–∏–ª–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
            cursor.execute("""
                SELECT COUNT(*) FROM user_stats WHERE sensitive_info_sent = TRUE;
            """)
            stats['–ü–æ–ª—É—á–∏–ª–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏'] = cursor.fetchone()[0]

            # –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–∞—è –∫–æ–Ω–≤–µ—Ä—Å–∏—è
            if stats['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π'] > 0:
                conversion_rate = (stats['–ü–æ–ª—É—á–∏–ª–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏'] / stats['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π']) * 100
            else:
                conversion_rate = 0.0
            stats['–ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–∞—è –∫–æ–Ω–≤–µ—Ä—Å–∏—è'] = conversion_rate

            return stats
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        return None
    finally:
        conn.close()

async def start_command(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    chat_id = update.message.chat_id
    context.chat_data['chat_id'] = chat_id  # –°–æ—Ö—Ä–∞–Ω—è–µ–º chat_id –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏

    keyboard = [
        [InlineKeyboardButton("–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", callback_data='get_stats')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    welcome_message = (
        "–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –≤–∞—Å –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—à–µ–π —É—Å–ª—É–≥–∏!\n\n"
        "–î–∞–Ω–Ω—ã–π –±–æ—Ç —è–≤–ª—è–µ—Ç—Å—è –≤–∞—à–∏–º –ª–∏—á–Ω—ã–º –±–æ—Ç–æ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.\n"
        "–ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤–∞—à–µ–º—É –∑–∞–∫–∞–∑—É –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏.\n\n"
        "–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"
    )
    await update.message.reply_text(welcome_message, reply_markup=reply_markup)

async def delete_previous_message(context: CallbackContext):
    """–£–¥–∞–ª—è–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π, –µ—Å–ª–∏ –æ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."""
    chat_id = context.chat_data.get('chat_id')
    last_message_id = context.chat_data.get('last_stats_message_id')

    if chat_id and last_message_id:
        try:
            await context.bot.delete_message(chat_id=chat_id, message_id=last_message_id)
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

async def send_stats(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É'."""
    await delete_previous_message(context)  # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å

    stats = get_statistics()
    if stats:
        stats_message = (
            f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n\n"
            f"‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π: *{stats['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π']}*\n"
            f"‚Ä¢ –ù–∞—á–∞—Ç–æ –¥–∏–∞–ª–æ–≥–æ–≤: *{stats['–ù–∞—á–∞—Ç–æ –¥–∏–∞–ª–æ–≥–æ–≤']}*\n"
            f"‚Ä¢ –ü–æ–ª—É—á–∏–ª–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏: *{stats['–ü–æ–ª—É—á–∏–ª–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏']}*\n\n"
            f"–ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–∞—è –∫–æ–Ω–≤–µ—Ä—Å–∏—è —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç: *{stats['–ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–∞—è –∫–æ–Ω–≤–µ—Ä—Å–∏—è']:.2f}%*"
        )
        sent_message = await update.callback_query.message.reply_text(stats_message, parse_mode='Markdown')
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
        context.chat_data['last_stats_message_id'] = sent_message.message_id
    else:
        await update.callback_query.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."""
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –±–æ—Ç–∞
    application = ApplicationBuilder().token(TELEGRAM_BOT_TOKEN).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler('start', start_command))
    application.add_handler(CallbackQueryHandler(send_stats, pattern='get_stats'))

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")
    application.run_polling()

if __name__ == '__main__':
    main()
